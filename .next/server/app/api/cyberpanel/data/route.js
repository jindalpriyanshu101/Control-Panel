/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/cyberpanel/data/route";
exports.ids = ["app/api/cyberpanel/data/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fcyberpanel%2Fdata%2Froute&page=%2Fapi%2Fcyberpanel%2Fdata%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcyberpanel%2Fdata%2Froute.ts&appDir=E%3A%5CControl%20Panel%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CControl%20Panel&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fcyberpanel%2Fdata%2Froute&page=%2Fapi%2Fcyberpanel%2Fdata%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcyberpanel%2Fdata%2Froute.ts&appDir=E%3A%5CControl%20Panel%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CControl%20Panel&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var E_Control_Panel_src_app_api_cyberpanel_data_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/cyberpanel/data/route.ts */ \"(rsc)/./src/app/api/cyberpanel/data/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/cyberpanel/data/route\",\n        pathname: \"/api/cyberpanel/data\",\n        filename: \"route\",\n        bundlePath: \"app/api/cyberpanel/data/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"E:\\\\Control Panel\\\\src\\\\app\\\\api\\\\cyberpanel\\\\data\\\\route.ts\",\n    nextConfigOutput,\n    userland: E_Control_Panel_src_app_api_cyberpanel_data_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/cyberpanel/data/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fcyberpanel%2Fdata%2Froute&page=%2Fapi%2Fcyberpanel%2Fdata%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcyberpanel%2Fdata%2Froute.ts&appDir=E%3A%5CControl%20Panel%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CControl%20Panel&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/cyberpanel/data/route.ts":
/*!**********************************************!*\
  !*** ./src/app/api/cyberpanel/data/route.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_cyberpanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../lib/cyberpanel */ \"(rsc)/./src/lib/cyberpanel.ts\");\n\n\nasync function GET(request) {\n    try {\n        // Test CyberPanel connection first\n        const connectionTest = await (0,_lib_cyberpanel__WEBPACK_IMPORTED_MODULE_1__.cyberPanelRequest)('verifyLogin');\n        if (!connectionTest.status) {\n            console.log('CyberPanel connection failed, using mock data');\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(getMockData());\n        }\n        // Fetch real data from CyberPanel\n        const [websitesResult, packagesResult] = await Promise.all([\n            (0,_lib_cyberpanel__WEBPACK_IMPORTED_MODULE_1__.fetchCyberPanelWebsites)(1, 100),\n            (0,_lib_cyberpanel__WEBPACK_IMPORTED_MODULE_1__.fetchCyberPanelPackages)()\n        ]);\n        // Transform CyberPanel data to our format\n        const websitesData = websitesResult?.data ? JSON.parse(websitesResult.data) : [];\n        const websites = websitesData.map((site)=>({\n                id: site.domain || site.websiteName || site.name,\n                domain: site.domain || site.websiteName || site.name,\n                status: site.state === 'Suspended' ? 'suspended' : 'active',\n                owner: site.admin || 'admin',\n                created: site.created || new Date().toISOString(),\n                plan: site.package || 'Default',\n                diskUsed: parseInt(site.diskUsed?.replace('MB', '')) || 0,\n                diskLimit: 1000,\n                bandwidthUsed: parseInt(site.monthlyBandwidthUsage) || 0,\n                bandwidthLimit: 1000,\n                phpVersion: site.phpVersion || '8.1',\n                ssl: site.ssl === 'Yes' || site.sslIssued || false\n            })) || [];\n        const packagesData = packagesResult?.data ? JSON.parse(packagesResult.data) : [];\n        const packages = packagesData.map((pkg)=>({\n                id: pkg.packageName || pkg.name,\n                name: pkg.packageName || pkg.name,\n                description: pkg.description || `Package: ${pkg.packageName || pkg.name}`,\n                price: 0,\n                features: [\n                    `${pkg.diskSpace || '1000'} MB Disk Space`,\n                    `${pkg.bandwidth || '1000'} MB Bandwidth`,\n                    `${pkg.emailAccounts || 'Unlimited'} Email Accounts`,\n                    `${pkg.dataBases || 'Unlimited'} Databases`,\n                    `${pkg.ftpAccounts || 'Unlimited'} FTP Accounts`\n                ],\n                limits: {\n                    websites: parseInt(pkg.allowedDomains) || 1,\n                    emailAccounts: parseInt(pkg.emailAccounts) || -1,\n                    databases: parseInt(pkg.dataBases) || -1,\n                    bandwidth: parseInt(pkg.bandwidth) || 1000,\n                    storage: parseInt(pkg.diskSpace) || 1000\n                }\n            })) || [];\n        // Generate stats from real data\n        const stats = {\n            totalUsers: 1,\n            totalWebsites: websites.length,\n            activeWebsites: websites.filter((w)=>w.status === 'active').length,\n            suspendedWebsites: websites.filter((w)=>w.status === 'suspended').length,\n            totalBandwidth: websites.reduce((sum, w)=>sum + w.bandwidthUsed, 0),\n            totalStorage: websites.reduce((sum, w)=>sum + w.diskUsed, 0),\n            totalPackages: packages.length\n        };\n        // Extract users from website data since dedicated user endpoints may not be available\n        let users = [];\n        try {\n            // Get unique users from website data (only actual admin users, not emails)\n            const userMap = new Map();\n            for (const site of websitesData){\n                const admin = site.admin || 'admin';\n                const email = site.adminEmail || `${admin}@cyberpanel.local`;\n                if (!userMap.has(admin)) {\n                    userMap.set(admin, {\n                        id: admin,\n                        name: admin === 'admin' ? 'Administrator' : admin.charAt(0).toUpperCase() + admin.slice(1),\n                        email: email,\n                        role: admin === 'admin' ? 'admin' : 'user',\n                        websites: 0,\n                        created: new Date().toISOString(),\n                        lastLogin: new Date().toISOString(),\n                        status: 'active'\n                    });\n                }\n                // Count websites for each user\n                userMap.get(admin).websites += 1;\n            }\n            users = Array.from(userMap.values());\n            // Update stats with real user count\n            stats.totalUsers = users.length || 1;\n        } catch (error) {\n            console.error('Error extracting user data from websites:', error);\n            // Fallback to mock admin user if user extraction fails\n            users = [\n                {\n                    id: 'admin',\n                    name: 'Administrator',\n                    email: 'admin@cyberpanel.local',\n                    role: 'admin',\n                    websites: websites.length,\n                    created: new Date().toISOString(),\n                    lastLogin: new Date().toISOString(),\n                    status: 'active'\n                }\n            ];\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: {\n                websites,\n                users,\n                packages,\n                stats\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching CyberPanel data:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: 'Failed to fetch CyberPanel data',\n            data: getMockData()\n        });\n    }\n}\nfunction getMockData() {\n    return {\n        websites: [\n            {\n                id: 'example.com',\n                domain: 'example.com',\n                status: 'active',\n                owner: 'admin',\n                created: new Date().toISOString(),\n                plan: 'Default',\n                diskUsed: 150,\n                diskLimit: 1000,\n                bandwidthUsed: 250,\n                bandwidthLimit: 1000,\n                phpVersion: '8.1',\n                ssl: true\n            }\n        ],\n        users: [\n            {\n                id: 'admin',\n                name: 'Administrator',\n                email: 'admin@cyberpanel.local',\n                role: 'admin',\n                websites: 1,\n                created: new Date().toISOString(),\n                lastLogin: new Date().toISOString(),\n                status: 'active'\n            }\n        ],\n        packages: [\n            {\n                id: 'default',\n                name: 'Default',\n                description: 'Default hosting package',\n                price: 0,\n                features: [\n                    '1000 MB Disk Space',\n                    '1000 MB Bandwidth',\n                    'Unlimited Email Accounts',\n                    'Unlimited Databases'\n                ],\n                limits: {\n                    websites: 1,\n                    emailAccounts: -1,\n                    databases: -1,\n                    bandwidth: 1000,\n                    storage: 1000\n                }\n            }\n        ],\n        stats: {\n            totalUsers: 1,\n            totalWebsites: 1,\n            activeWebsites: 1,\n            suspendedWebsites: 0,\n            totalBandwidth: 250,\n            totalStorage: 150,\n            totalPackages: 1\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/cyberpanel/data/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/cyberpanel.ts":
/*!*******************************!*\
  !*** ./src/lib/cyberpanel.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CyberPanelAPI: () => (/* binding */ CyberPanelAPI),\n/* harmony export */   createDatabaseCyberPanel: () => (/* binding */ createDatabaseCyberPanel),\n/* harmony export */   createEmailCyberPanel: () => (/* binding */ createEmailCyberPanel),\n/* harmony export */   createWebsiteCyberPanel: () => (/* binding */ createWebsiteCyberPanel),\n/* harmony export */   cyberPanelRequest: () => (/* binding */ cyberPanelRequest),\n/* harmony export */   deleteWebsiteCyberPanel: () => (/* binding */ deleteWebsiteCyberPanel),\n/* harmony export */   fetchCyberPanelChildUsers: () => (/* binding */ fetchCyberPanelChildUsers),\n/* harmony export */   fetchCyberPanelPackages: () => (/* binding */ fetchCyberPanelPackages),\n/* harmony export */   fetchCyberPanelUsers: () => (/* binding */ fetchCyberPanelUsers),\n/* harmony export */   fetchCyberPanelWebsites: () => (/* binding */ fetchCyberPanelWebsites),\n/* harmony export */   getCyberPanelAPI: () => (/* binding */ getCyberPanelAPI),\n/* harmony export */   verifyCyberPanelLogin: () => (/* binding */ verifyCyberPanelLogin)\n/* harmony export */ });\n/**\r\n * CyberPanel API utilities for authentication and API calls\r\n * Updated to use proper token-based authentication as per CyberPanel Cloud API\r\n */ /**\r\n * Make an authenticated request to CyberPanel API\r\n * Based on CyberPanel source code: cloudAPI/views.py and cloudManager.py\r\n */ async function cyberPanelRequest(controller, data = {}) {\n    const url = process.env.CYBERPANEL_URL;\n    const username = process.env.CYBERPANEL_USERNAME;\n    const token = process.env.CYBERPANEL_TOKEN;\n    const password = process.env.CYBERPANEL_PASSWORD;\n    if (!url || !username) {\n        console.warn('CyberPanel credentials not configured. Required: CYBERPANEL_URL, CYBERPANEL_USERNAME');\n        return {\n            status: false,\n            error: 'CyberPanel not configured'\n        };\n    }\n    // Try token authentication first, then fallback to password\n    const authMethods = [];\n    if (token) {\n        authMethods.push({\n            name: 'Token',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': token\n            },\n            data: {\n                controller,\n                serverUserName: username,\n                ...data\n            }\n        });\n    }\n    if (password) {\n        authMethods.push({\n            name: 'Password',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            data: {\n                controller,\n                serverUserName: username,\n                password,\n                ...data\n            }\n        });\n    }\n    if (authMethods.length === 0) {\n        return {\n            status: false,\n            error: 'No authentication method available (need token or password)'\n        };\n    }\n    for (const method of authMethods){\n        try {\n            console.log(`CyberPanel API Request (${method.name}):`, {\n                url: `${url}/cloudAPI/`,\n                controller,\n                serverUserName: username,\n                additionalData: data\n            });\n            const response = await fetch(`${url}/cloudAPI/`, {\n                method: 'POST',\n                headers: method.headers,\n                body: JSON.stringify(method.data)\n            });\n            if (!response.ok) {\n                console.error(`${method.name} HTTP Error:`, response.status, response.statusText);\n                continue;\n            }\n            const responseText = await response.text();\n            console.log(`${method.name} Raw Response:`, responseText);\n            // Try to parse as JSON\n            try {\n                const result = JSON.parse(responseText);\n                console.log(`${method.name} Parsed Response:`, result);\n                // Check if this looks like a valid CyberPanel response\n                if (result.status !== undefined || result.error_message !== undefined) {\n                    // Check if the response indicates success\n                    if (result.status === 1 || result.status === true || result.status === 'success') {\n                        return {\n                            status: true,\n                            data: result.data || result,\n                            message: result.message\n                        };\n                    } else {\n                        const error = result.error_message || result.error || 'Unknown error';\n                        // Don't return error immediately, try next auth method\n                        console.log(`${method.name} authentication failed:`, error);\n                        if (error.includes('Invalid login') || error.includes('Unauthorized') || error.includes('API Access Disabled')) {\n                            continue;\n                        }\n                        return {\n                            status: false,\n                            error\n                        };\n                    }\n                }\n                return {\n                    status: false,\n                    error: 'Invalid response format'\n                };\n            } catch (parseError) {\n                console.error(`${method.name} JSON parse failed:`, parseError);\n                continue;\n            }\n        } catch (error) {\n            console.error(`${method.name} request failed:`, error);\n            continue;\n        }\n    }\n    return {\n        status: false,\n        error: 'All authentication methods failed'\n    };\n}\n/**\r\n * Verify CyberPanel login credentials\r\n */ async function verifyCyberPanelLogin() {\n    return cyberPanelRequest('verifyLogin');\n}\n/**\r\n * Create a new website in CyberPanel\r\n */ async function createWebsiteCyberPanel(domain, email, packageName = 'Default') {\n    return cyberPanelRequest('submitWebsiteCreation', {\n        domainName: domain,\n        ownerEmail: email,\n        packageName,\n        websiteOwner: 'admin'\n    });\n}\n/**\r\n * Delete a website from CyberPanel\r\n */ async function deleteWebsiteCyberPanel(domain) {\n    return cyberPanelRequest('submitWebsiteDeletion', {\n        websiteName: domain\n    });\n}\n/**\r\n * Fetch all websites from CyberPanel\r\n */ async function fetchCyberPanelWebsites(page = 1, recordsToShow = 50) {\n    return cyberPanelRequest('fetchWebsites', {\n        page,\n        recordsToShow\n    });\n}\n/**\r\n * Fetch all packages from CyberPanel\r\n */ async function fetchCyberPanelPackages() {\n    return cyberPanelRequest('fetchPackages');\n}\n/**\r\n * Fetch all users from CyberPanel\r\n */ async function fetchCyberPanelUsers() {\n    return cyberPanelRequest('fetchUsers');\n}\n/**\r\n * Fetch child users from CyberPanel\r\n */ async function fetchCyberPanelChildUsers() {\n    return cyberPanelRequest('fetchChildUsers');\n}\n/**\r\n * Create a database in CyberPanel\r\n */ async function createDatabaseCyberPanel(dbName, dbUsername, dbPassword, websiteName) {\n    return cyberPanelRequest('submitDBCreation', {\n        databaseWebsite: websiteName,\n        dbName,\n        dbUsername,\n        dbPassword\n    });\n}\n/**\r\n * Create an email account in CyberPanel\r\n */ async function createEmailCyberPanel(email, password) {\n    const [username, domain] = email.split('@');\n    return cyberPanelRequest('submitEmailCreation', {\n        domain,\n        userName: username,\n        password\n    });\n}\n/**\r\n * Legacy CyberPanelAPI class for backward compatibility\r\n * Updated to use proper token authentication\r\n */ class CyberPanelAPI {\n    constructor(config){\n        this.config = config;\n    }\n    async createWebsite(data) {\n        const result = await createWebsiteCyberPanel(data.domainName, data.ownerEmail, data.packageName || 'Default');\n        return {\n            status: result.status ? 'success' : 'error',\n            message: result.error || 'Website creation completed',\n            websiteId: data.domainName\n        };\n    }\n    async deleteWebsite(domainName) {\n        const result = await deleteWebsiteCyberPanel(domainName);\n        return {\n            status: result.status ? 'success' : 'error',\n            message: result.error || 'Website deletion completed'\n        };\n    }\n    async installSSL(data) {\n        // SSL installation through CyberPanel API\n        const result = await cyberPanelRequest('issueSSL', {\n            domainName: data.domainName,\n            email: data.email\n        });\n        return {\n            status: result.status ? 'success' : 'error',\n            message: result.error || 'SSL installation completed'\n        };\n    }\n    async getWebsiteStatus(domainName) {\n        const result = await cyberPanelRequest('getWebsiteDetails', {\n            domainName\n        });\n        return {\n            status: result.status ? 'success' : 'error',\n            message: result.error || 'Website status retrieved',\n            websiteData: result.data\n        };\n    }\n    async createDatabase(websiteName, databaseName, username, password) {\n        return createDatabaseCyberPanel(databaseName, username, password, websiteName);\n    }\n    async createEmailAccount(domainName, email, password) {\n        return createEmailCyberPanel(email, password);\n    }\n    async createBackup(domainName) {\n        const result = await cyberPanelRequest('submitBackupCreation', {\n            websiteName: domainName\n        });\n        return {\n            status: result.status ? 'success' : 'error',\n            message: result.error || 'Backup creation completed'\n        };\n    }\n}\n// Singleton instance\nlet cyberPanelAPI = null;\nfunction getCyberPanelAPI() {\n    if (!cyberPanelAPI) {\n        const config = {\n            baseURL: process.env.CYBERPANEL_URL || 'https://localhost:8090',\n            username: process.env.CYBERPANEL_USERNAME || 'admin',\n            token: process.env.CYBERPANEL_TOKEN || ''\n        };\n        cyberPanelAPI = new CyberPanelAPI(config);\n    }\n    return cyberPanelAPI;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/cyberpanel.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fcyberpanel%2Fdata%2Froute&page=%2Fapi%2Fcyberpanel%2Fdata%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcyberpanel%2Fdata%2Froute.ts&appDir=E%3A%5CControl%20Panel%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CControl%20Panel&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();